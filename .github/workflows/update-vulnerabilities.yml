name: Update Vulnerability Data
on:
  schedule:
    # Run at 7 AM EST daily (12:00 UTC)
    - cron: '0 12 * * *'
  workflow_dispatch:

jobs:
  update-vulnerability-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Important: Fetch all history for all branches
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r code/requirements.txt
    
    - name: Set up Git configuration
      run: |
        git config --global user.name 'GitHub Actions Bot'
        git config --global user.email 'actions@github.com'
    
    - name: Run NVD Processing Script
      env:
        VULNCHECK_API_KEY: ${{ secrets.VULNCHECK_API_KEY }}
      run: |
        python code/process_nvd.py
    
    - name: Check for changes and create branch
      id: changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        BRANCH_NAME="vulnerability-data-update-$(date +"%Y%m%d%H%M%S")"
        
        # Stage specific files
        git add cvss-te.csv code/last_run.txt data/epss/epss_scores.csv
        
        # Check if there are changes
        if ! git diff --staged --quiet; then
          echo "Changes detected"
          echo "changes_exist=true" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          
          # Commit changes
          git commit -m "Update vulnerability data: $TIMESTAMP"
          
          # Create a new branch and push changes
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME
        else
          echo "No changes to commit"
          echo "changes_exist=false" >> $GITHUB_OUTPUT
    
    - name: Create and Merge Pull Request
      if: steps.changes.outputs.changes_exist == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH_NAME: ${{ steps.changes.outputs.branch_name }}
        TIMESTAMP: ${{ steps.changes.outputs.timestamp }}
      run: |
        gh pr create \
          --base main \
          --head $BRANCH_NAME \
          --title "Update Vulnerability Data: $TIMESTAMP" \
          --body "Automated update of vulnerability data includes updated CVSS-TE CSV, last run timestamp, and EPSS scores."
        
        # Merge PR automatically
        gh pr merge $BRANCH_NAME --merge
